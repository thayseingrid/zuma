template <class T>
class cel {
    public:
        T conteudo;
        cel* prox;
        cel* ant;
};

template <class T>
class lista {
    private:
        cel<T>* cab;
        int tam;

    public:
        lista() {
            cab = new cel<T> ();
            tam = 0;
            cab->prox = cab;
            cab->ant = cab;
        }

        void inserir_frente(const T& d) {
            cel<T>* novo;
            novo = new cel<T> ();
        
            novo->prox = cab->prox;
            novo->ant = cab;
            cab->prox = novo;
            novo->prox->ant = novo;

            tam += 1;
        } 

        void inserir_atras(const T& d) {
            cel<T>* novo;
            novo = new cel<T> ();

            novo->conteudo = d;
            tam += 1;
        }

        bool eh_vazia() {
            if (cab->prox == cab && cab->ant == cab) 
                return true;
            else
                return false;
        }

        void print() {
            cel<T>* ptr;
            ptr = cab->prox;

            while (ptr != cab) {
                cout << prt->conteudo;
                ptr = ptr->prox;
            }
        }

        ~lista() {
            delete cab;
        }
};


int main() {
    int num = 1;
    lista<int> Lista;
    
    while (num != 0) {
        cin >> num;
        Lista.inserir_frente(num);
    }

    Lista.print();
    return 0;
}



